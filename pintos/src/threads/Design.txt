
CIS 520 - Programming Project #1

                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Grant Unruh <gunruh@ksu.edu>
Phong Le <langtuqn2007@ksu.edu>
Jacob Pruitt <pruitt93@ksu.edu>

...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for
>> the TA, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation,
>> course text, lecture notes, and course staff.


                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We added int timerTick to thread.h, to keep track of when we want the threads to wake up.

We added compareList to thread.h and thread.c, a method to compare timerTick between threads.

We added struct semaphore waitSema and struct list sleepList to timer.c. sleepList keeps track of waiting threads and waitSema is used to wake up threads when appropriate.



---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.

Interrupts are disabled first before acting on anything else. timerTick is updated for the current thread. Then, the current thread is inserted in order to sleepList. The thread is blocked, sema_down is called, and interrupts are turned back on.

The interrupt handler increments ticks, sleepList is looped through to remove threads, sema up is called to wake up the thread and the thread is unblocked so that it can be worked on.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

The timer interrupt handler is kept short by focusing only on removing threads from sleepList and calling sema_up. 



---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

Race conditions are avoided by keep the method short and correctly handling disabling and enabling interrupts. Threads are blocked and kept track of using semaphores.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Race conditions are avoided by effectively using semaphores to keep track of threads and shared resources. Interrupt handlers are used to handle changing or adding variables and shared resources. 

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?

By only adding one method, and only adding changes to two methods, this part of the project was kept short and simple. We chose this design in part because of the documentation in pintos, especially list.h. List.h has plenty of example and pseudo-code that was helpful in implementing the Alarm Clock. The loop used in timer_interrupt was based on an example loop in list.h. Interrupt handling in timer_sleep was based off of interrupt handling shown in other methods in thread.c. Other design decisions were from our reading of Project1Session.pdf.

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?


              ADVANCED SCHEDULER [EXTRA CREDIT]
              =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?
